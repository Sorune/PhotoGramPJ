
services:
#  파일 저장용 도커 컨테이너 생성 : 로컬 환경에서 도커 컨테이너 내부 접근 제한, 해당 부분 고려
#  photogram:
#    container_name: ImageStorage
#    image: 'alpine:latest'
#    volumes:
#      - imageStorage:/app/upload
#    command: ["sleep","infinity"]
#    environment:
#    - UPLOAD_DIR=/app/upload
#    networks:
#      - backend
#    restart: unless-stopped
#    depends_on:
#      - mariadb
#      - redis
#      - kafka
#      - zookeeper
#

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    environment:
      MARIADB_ROOT_PASSWORD: 1234
      MARIADB_DATABASE: photogram
      MARIADB_USER: gallery
      MARIADB_PASSWORD: photo
    volumes:
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql  # init.sql 파일을 컨테이너로 마운트

    ports:
      - '3306:3306'
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysql", "-u", "gallery", "-p", "photo", "-e", "SHOW DATABASES;"]
      interval: 30s
      timeout: 10s
      retries: 5
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - backend
    restart: unless-stopped

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENER_NAME: OUTSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - backend
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - monitoring-network

networks:
  backend:
    driver: bridge
  monitoring-network:
    driver: bridge
#
#volumes:
#  imageStorage:
